using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

public class BaseResponse
{
    public string? code { get; set; }
    public string? message { get; set; }
}

public class StartRequest
{
    public string? username { get; set; }
    public string? email { get; set; }
}

public class StartResponse : BaseResponse
{
    public string? accessToken { get; set; }
}

public class Probe
{
    public string? id { get; set; }
    public string? name { get; set; }
    public string? encoding { get; set; }
}

public class ProbesResponse : BaseResponse
{
    public Probe[]? probes { get; set; }
}

public class SyncResponse : BaseResponse
{
    public string? t1 { get; set; }
    public string? t2 { get; set; }
}

public static class LumaApiClient
{
    private static readonly HttpClient httpClient = new HttpClient();
    private static string baseUrl = "https://luma.lacuna.cc";

    public static async Task<string> GetAccessTokenAsync(string username, string email)
    {
        var startApiUrl = $"{baseUrl}/api/start";
        var startRequest = new StartRequest
        {
            username = username,
            email = email
        };

        var content = new StringContent(JsonSerializer.Serialize(startRequest), Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync(startApiUrl, content);

        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync();
            var startResponse = JsonSerializer.Deserialize<StartResponse>(responseBody);

            if (startResponse!.code == "Success")
            {
                return startResponse.accessToken!;
            }
            else
            {
                throw new Exception($"Failed to get access token. Message: {startResponse.message}");
            }
        }
        else
        {
            throw new Exception($"Failed to call Start API. Status code: {response.StatusCode}");
        }
    }

    public static async Task<ProbesResponse> GetProbesInfoAsync(string accessToken)
    {
        var probeApiUrl = $"{baseUrl}/api/probe";
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        var response = await httpClient.GetAsync(probeApiUrl);

        if (response.IsSuccessStatusCode)
        {
            var responseBody = await response.Content.ReadAsStringAsync();
            var probesResponse = JsonSerializer.Deserialize<ProbesResponse>(responseBody);
            return probesResponse!;
        }
        else
        {
            throw new Exception($"Failed to get probes info. Status code: {response.StatusCode}");
        }
    }

    public static async Task<SyncResponse> SyncProbeClockAsync(string accessToken, string probeId)
    {
        var syncApiUrl = $"{baseUrl}/api/probe/{probeId}/sync";
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        // Perform four timestamps
        DateTimeOffset t0 = DateTimeOffset.UtcNow;
        var t0Str = t0.Ticks.ToString();
        var syncRequest = new StringContent("", Encoding.UTF8, "application/json");
        var t1Str = "";
        var t2Str = "";

        // First timestamp (t1)
        var response1 = await httpClient.PostAsync(syncApiUrl, syncRequest);
        if (response1.IsSuccessStatusCode)
        {
            var responseBody1 = await response1.Content.ReadAsStringAsync();
            var syncResponse1 = JsonSerializer.Deserialize<SyncResponse>(responseBody1);
            t1Str = syncResponse1!.t1;
        }
        else
        {
            throw new Exception($"Failed to get t1 timestamp for Probe {probeId}. Status code: {response1.StatusCode}");
        }

        // Second timestamp (t2)
        var response2 = await httpClient.PostAsync(syncApiUrl, syncRequest);
        if (response2.IsSuccessStatusCode)
        {
            var responseBody2 = await response2.Content.ReadAsStringAsync();
            var syncResponse2 = JsonSerializer.Deserialize<SyncResponse>(responseBody2);
            t2Str = syncResponse2!.t2;
        }
        else
        {
            throw new Exception($"Failed to get t2 timestamp for Probe {probeId}. Status code: {response2.StatusCode}");
        }

        // Third timestamp (t3)
        var t3 = DateTimeOffset.UtcNow;
        var t3Str = t3.Ticks.ToString();

        // Calculate time offset (θ) and round-trip delay (σ)
        long t0Ticks = long.Parse(t0Str!);
        long t1Ticks = long.Parse(t1Str!);
        long t2Ticks = long.Parse(t2Str!);
        long t3Ticks = long.Parse(t3Str!);

        long timeOffset = 2 * (t1Ticks - t0Ticks) + (t2Ticks - t3Ticks);
        long roundTripDelay = (t3Ticks - t0Ticks) - (t2Ticks - t1Ticks);

        Console.WriteLine($"Probe {probeId} - Time Offset: {timeOffset} ticks, Round-Trip Delay: {roundTripDelay} ticks");

        var syncResponse = new SyncResponse
        {
            t1 = t1Str,
            t2 = t2Str
        };

        return syncResponse;
    }
}

public class Program
{
    public static async Task Main()
    {
        try
        {
            string username = "Gustavo";
            string email = "gustavodovaleferreira@gmail.com";

            string accessToken = await LumaApiClient.GetAccessTokenAsync(username, email);
            Console.WriteLine($"Access token: {accessToken}");

            var probesResponse = await LumaApiClient.GetProbesInfoAsync(accessToken);
            if (probesResponse.code == "Success")
            {
                foreach (var probe in probesResponse.probes!)
                {
                    Console.WriteLine($"Probe ID: {probe.id}, Name: {probe.name}, Encoding: {probe.encoding}");

                    if (probe.encoding == "Ticks")
                    {
                        var syncResponse = await LumaApiClient.SyncProbeClockAsync(accessToken, probe.id!);
                    }
                    else if (probe.encoding == "TicksBinary")
                    {
                        // Handle 'TicksBinary' encoding
                        Console.WriteLine($"Handling 'TicksBinary' encoding for probe {probe.id} is not implemented.");
                    }
                    else
                    {
                        Console.WriteLine($"Unsupported encoding for probe {probe.id}: {probe.encoding}");
                    }
                }
            }
            else
            {
                Console.WriteLine($"Failed to get probes info. Message: {probesResponse.message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}